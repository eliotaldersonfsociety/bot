// flowPararBot.js

import { addKeyword } from '@builderbot/bot';
import { BaileysProvider as Provider } from '@builderbot/provider-baileys';
import { numberClean } from './utils.js'; // Aseg√∫rate de importar numberClean correctamente desde utils.js

const ADMIN_NUMBER = "+573219414421";

const blacklist = new Set(); // Usamos un Set para almacenar los n√∫meros en la lista negra

// Funciones para gestionar la lista negra en memoria
function checkIfNumberIsBlacklisted(phoneNumber) {
    return blacklist.has(phoneNumber);
}

function addNumberToBlacklist(phoneNumber) {
    blacklist.add(phoneNumber);
    console.log(`N√∫mero ${phoneNumber} a√±adido a la lista negra.`);
}

function removeNumberFromBlacklist(phoneNumber) {
    blacklist.delete(phoneNumber);
    console.log(`N√∫mero ${phoneNumber} eliminado de la lista negra.`);
}

// Flujo para gestionar la lista negra
export const blackListFlow = addKeyword('mute')
    .addAction(async (ctx, { flowDynamic }) => {
        console.log("Keyword 'mute' activated."); // Mensaje para verificar activaci√≥n de la keyword

        if (ctx.from === ADMIN_NUMBER) {
            console.log(`Admin ${ADMIN_NUMBER} triggered the action.`); // Verificar si el administrador activa la acci√≥n

            // Extraer el n√∫mero de tel√©fono del mensaje utilizando numberClean
            const toMute = numberClean(ctx.body);

            // Verificar si se ha proporcionado un n√∫mero de tel√©fono v√°lido
            if (toMute) {
                const isBlacklisted = checkIfNumberIsBlacklisted(toMute);
                if (!isBlacklisted) {
                    addNumberToBlacklist(toMute);
                    console.log(`N√∫mero ${toMute} a√±adido a la lista negra.`); // Confirmar a√±adido a la lista negra
                    await flowDynamic(`‚ùå ${toMute} muted`);
                } else {
                    removeNumberFromBlacklist(toMute);
                    console.log(`N√∫mero ${toMute} eliminado de la lista negra.`); // Confirmar eliminaci√≥n de la lista negra
                    await flowDynamic(`üÜó ${toMute} unmuted`);
                }
            } else {
                console.log("No se proporcion√≥ un n√∫mero de tel√©fono v√°lido."); // Manejar caso donde no se proporciona un n√∫mero v√°lido
                await flowDynamic(`No se proporcion√≥ un n√∫mero de tel√©fono v√°lido.`);
            }
        } else {
            console.log(`Unauthorized access attempt by ${ctx.from}.`); // Registro de intento de acceso no autorizado
        }
    });

// Funci√≥n para detener el bot
export function stopBot() {
    console.log("Bot stopped.");
    // L√≥gica para detener el bot
}

// Funci√≥n para reiniciar el bot
export function restartBot() {
    console.log("Bot restarted.");
    // L√≥gica para reiniciar el bot
}
